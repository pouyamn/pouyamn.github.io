<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Odoo Demystification</title><link href="https://pouyamn.github.io/" rel="alternate"></link><link href="https://pouyamn.github.io/feeds/non-odoo.atom.xml" rel="self"></link><id>https://pouyamn.github.io/</id><updated>2015-12-24T11:26:00+01:00</updated><entry><title>Seting Up this blog with Pelican</title><link href="https://pouyamn.github.io/posts/2015/12/24/setup-blog/" rel="alternate"></link><updated>2015-12-24T11:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:https://pouyamn.github.io,2015-12-24:posts/2015/12/24/setup-blog/</id><summary type="html">&lt;p&gt;Hi every body, at first it looked like this is a very easy process to setup this blog, but it wasn't that easy. 
Gitpages suggested Jekil for blog handling , but I wanted something pythonic, so I decided to use pelican. I made a first blog using the guide in github &lt;a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/"&gt;here&lt;/a&gt;. It was nice but i had a few problems, I'm using SVN normally, so I'm not very familiar with git, this was my source of problems, I guess.
The problem was about repositories, the method mentioned in that page was cool, in compare to the other and more official methods, but you have to use a submodule which was new to me. &lt;/p&gt;
&lt;p&gt;Ok let's cut the crap, I did this:&lt;/p&gt;
&lt;p&gt;First I made a repository by the &lt;a href="https://pages.github.com/"&gt;official documentions&lt;/a&gt; (I didn't install jekil). Then I created two new repositories, myusername.github.io-src and myusername.github.io, as explained on &lt;a href="https://github.com/new"&gt;Github pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then I cloned the source (...-src) to a folder named &lt;em&gt;ghpages&lt;/em&gt; by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/myusername/myusername.github.io-src.git ghpages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and made git remember my creditentials:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config credential.helper store
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I made a submodel repository by entering this in my main folder (ghpages):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git submodule add https://github.com/pouyamn/pouyamn.github.io.git output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so it made a folder named &lt;em&gt;output&lt;/em&gt;. Now it was the time for installing pelican and running it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python-pelican
&lt;span class="nb"&gt;cd&lt;/span&gt; /ghpages
pelican-quickstart 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we have to stop pelican from erasing the output directory everytime, I edited &lt;em&gt;publishconf.py&lt;/em&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;well it is almost there, make the first post in contents folder. I used MarkDown, although other languages are also possible. For this I installed haroopad&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install haroopad
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I made a file in &lt;em&gt;content&lt;/em&gt; folder named for example, &lt;em&gt;first.md&lt;/em&gt;. and I made this post in it.
Ok, let's take a look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you can now open &lt;em&gt;localhost:8000&lt;/em&gt; and enjoy your first post in your pc (links willnot work, they are directed to the &lt;em&gt;real&lt;/em&gt; blog). &lt;/p&gt;
&lt;p&gt;Publish time!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make publish
&lt;span class="nb"&gt;cd &lt;/span&gt;output/
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;First Post.&amp;quot;&lt;/span&gt;
git push -u origin master
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*.pyc&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; .gitignore &lt;span class="c"&gt;#don&amp;#39;t need pyc file&lt;/span&gt;
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;First commit.&amp;quot;&lt;/span&gt;
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Demystification:
make the html files, setup the links and prepare it, send the compiled result to github and finally send the source files to github too keep them safe :).
that's it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt;
Some caretaker's tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make publishing more automatic and comfortable:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#file: makefile&lt;/span&gt;
...
github: publish
        &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
        git -C &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; add -A .
        git -C &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; commit -m &lt;span class="s2"&gt;&amp;quot;Auto Post!&amp;quot;&lt;/span&gt;  
        git -C &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt; push origin master
        &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;
        git add -A .
        git commit -m &lt;span class="s2"&gt;&amp;quot;Auto Commit!&amp;quot;&lt;/span&gt;    
        git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I can use &lt;code&gt;make github&lt;/code&gt; for publishing and posting to my account.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;take care of &lt;code&gt;pelicanconf.py&lt;/code&gt; and &lt;code&gt;publishconf.py&lt;/code&gt;, the former is for local serving and testing and the latter is for publishing, as the name suggests!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;put disqus, google analytics etc in publish profile only, put the others in &lt;strong&gt;both&lt;/strong&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use relative paths in &lt;code&gt;pelicanconf.py&lt;/code&gt;, don't use them in &lt;code&gt;publishconf.py&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category><category term="publishing"></category></entry></feed>