<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Odoo Demystification</title><link href="http://pouyamn.github.io/" rel="alternate"></link><link href="http://pouyamn.github.io/feeds/all.atom.xml" rel="self"></link><id>http://pouyamn.github.io/</id><updated>2016-01-23T21:26:00+01:00</updated><entry><title>Would you like 'like' and 'ilike' in your *domain* and *attr*?</title><link href="http://pouyamn.github.io/posts/2016/01/23/view_domain_add_like/" rel="alternate"></link><updated>2016-01-23T21:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:pouyamn.github.io,2016-01-23:posts/2016/01/23/view_domain_add_like/</id><summary type="html">&lt;p&gt;The point is domain calculations (attrs is also using domain) are done in JS not the database, so you can not use SQL commands such as 'ilike'.&lt;/p&gt;
&lt;p&gt;But there is a way to add this function to Odoo rather easily with some coding. Edit &lt;code&gt;view_form.js&lt;/code&gt; ( in openerp/addons/web/static/src/js), find this line:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;not in&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;isArray&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;))&lt;/span&gt; &lt;span class="nx"&gt;val&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="p"&gt;[&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;];&lt;/span&gt;
                &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="o"&gt;!&lt;/span&gt;&lt;span class="nx"&gt;_&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;).&lt;/span&gt;&lt;span class="nx"&gt;contains&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field_value&lt;/span&gt;&lt;span class="p"&gt;));&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and add these lines after it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;like&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;not like&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;)&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ilike&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;&amp;gt;=&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt;
            &lt;span class="k"&gt;case&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;ilike&amp;#39;&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;
                &lt;span class="nx"&gt;stack&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;push&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;field_value&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;().&lt;/span&gt;&lt;span class="nx"&gt;indexOf&lt;/span&gt;&lt;span class="p"&gt;(&lt;/span&gt;&lt;span class="nx"&gt;val&lt;/span&gt;&lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="nx"&gt;toUpperCase&lt;/span&gt;&lt;span class="p"&gt;())&lt;/span&gt;&lt;span class="o"&gt;&amp;lt;&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="p"&gt;);&lt;/span&gt;
                &lt;span class="k"&gt;break&lt;/span&gt;&lt;span class="p"&gt;;&lt;/span&gt; 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and save it, TADA you can use it now. 
warning: if you use it with a field which is not string, it will cause an error&lt;/p&gt;</summary><category term="views"></category><category term="odoo"></category><category term="JS"></category><category term="hackish"></category></entry><entry><title>QWEB demystification, Part 1 - t-field and t-esc</title><link href="http://pouyamn.github.io/posts/2016/01/16/qweb-1/" rel="alternate"></link><updated>2016-01-16T11:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:pouyamn.github.io,2016-01-16:posts/2016/01/16/qweb-1/</id><summary type="html">&lt;p&gt;When I stated to make some QWEB reports, I was wondering why there are both &lt;code&gt;t-field&lt;/code&gt; and &lt;code&gt;t-esc&lt;/code&gt;? For example both &lt;code&gt;t-esc="partner_id.name"&lt;/code&gt; and &lt;code&gt;t-field="partner_id.name"&lt;/code&gt; has the exact same output. &lt;/p&gt;
&lt;p&gt;I made a thorough study and I'll tell you the results, but first... Let me write about QWEB, the great html templating engine. 
There are some templating language, and some of them are XML-based like Genshi, Thymeleaf or Facelets. But QWEB is exactly designed for Odoo, it has access to the database and python side and context. Other templating engines are more general than QWEB and the can normally access to some kind of context passed in a JSON object only. 
The beauty of QWEB is that it is python integrated, there are not just variables but also you can have some python expressions and also it has customizable widgets. I'll write about widgets and using expressions to change the html dynamically.
Appologies me for talking too much, lets get back to the story, &lt;code&gt;t-esc&lt;/code&gt; or &lt;code&gt;t-field&lt;/code&gt;. The differences are quite a few, in text fields they are just the same but it is not going on like this with the others. The difference is in the interpreter of them and the widgets.&lt;code&gt;t-esc&lt;/code&gt; actually calls a &lt;code&gt;safe-eval&lt;/code&gt; most of other 't's do the same but &lt;code&gt;t-field&lt;/code&gt; can acept only a field name, or a chain of dot seperated related fields. Also, &lt;code&gt;t-field&lt;/code&gt; uses form widgets for rendering the selected field while &lt;code&gt;t-esc&lt;/code&gt; only returns a simple python output (we can change this and prettify the otherwise blunt &lt;code&gt;t-esc&lt;/code&gt;, I'll talk about it in the following parts). For example if you call t-esc on a related field i.e. &lt;code&gt;t-esc="someMany2Onefield"&lt;/code&gt; it will print the python &lt;code&gt;__str__&lt;/code&gt; of the class and a record number, just like what you will have if you in python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someMany2Onefield&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;someMany2Onefield(12,)&lt;/code&gt;
but if you use &lt;code&gt;t-field&lt;/code&gt; it will display the &lt;code&gt;display_name&lt;/code&gt; field or the &lt;code&gt;name_get&lt;/code&gt;. The difference is &lt;code&gt;t-field&lt;/code&gt; uses form widget of the field as i said before. The same goes with the numerical fields, &lt;code&gt;t-field&lt;/code&gt; will use the &lt;code&gt;digits&lt;/code&gt; property of the field for decimal point and it will use thousend separator and other settings from the language settings of Odoo, while &lt;code&gt;t-esc&lt;/code&gt; simply print the number without formatting (although one can use python's &lt;code&gt;format&lt;/code&gt; function in &lt;code&gt;t-esc&lt;/code&gt;).
Other 't' tags also use safe_eval, &lt;code&gt;t-set&lt;/code&gt; in &lt;code&gt;t-value&lt;/code&gt; part, &lt;code&gt;t-if&lt;/code&gt;,  &lt;code&gt;t-foreach&lt;/code&gt;, &lt;code&gt;t-att&lt;/code&gt; and &lt;code&gt;t-attf&lt;/code&gt;, &lt;code&gt;t-raw&lt;/code&gt; and &lt;code&gt;t-log&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;What can be used in safe_eval&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;qweb_context&lt;/code&gt; and of course safe python commands! It raises two questions, what are &lt;em&gt;safe&lt;/em&gt; python commands and what is in &lt;code&gt;qweb_context&lt;/code&gt;?&lt;/p&gt;</summary><category term="QWEB"></category><category term="safe-eval"></category><category term="openerp"></category><category term="odoo"></category><category term="odoo reports"></category></entry><entry><title>QWEB demystification, Part 2 - qweb widgits</title><link href="http://pouyamn.github.io/posts/2016/01/16/qweb-2/" rel="alternate"></link><updated>2016-01-16T11:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:pouyamn.github.io,2016-01-16:posts/2016/01/16/qweb-2/</id><summary type="html"></summary><category term="QWEB"></category><category term="safe-eval"></category><category term="openerp"></category><category term="odoo"></category><category term="odoo reports"></category><category term="qweb widgits"></category></entry><entry><title>QWEB demystification, Part 3 - dynamic views in QWEB</title><link href="http://pouyamn.github.io/posts/2016/01/16/qweb-3/" rel="alternate"></link><updated>2016-01-16T11:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:pouyamn.github.io,2016-01-16:posts/2016/01/16/qweb-3/</id><summary type="html"></summary><category term="QWEB"></category><category term="safe-eval"></category><category term="openerp"></category><category term="odoo"></category><category term="odoo reports"></category></entry><entry><title>Keep Odoo running, easily</title><link href="http://pouyamn.github.io/posts/2016/01/12/keep-odoo-running/" rel="alternate"></link><updated>2016-01-12T11:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:pouyamn.github.io,2016-01-12:posts/2016/01/12/keep-odoo-running/</id><summary type="html">&lt;p&gt;A few months ago we had this problem with odoo, the server was sometimes jumping out; quiting with no error, sometimes some momory error. All we had to do was running it agian. It was happening about every 12-48 hours normally but some times every 2-3 hours. It was a pain in the butt, so I made an easy solution that is still working. It means no user complains anymore ;).&lt;/p&gt;
&lt;p&gt;A bit of history, I was using ssh to connect to the server and run it with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nohup ./openerp-server &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;please note that I ran ./openerep-server directly, whenever I close ssh connection the server would quit. &lt;/p&gt;
&lt;p&gt;The solution was a shell script. At first, I tried to check if odoo is running and if not run it. I started with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#NOT WORKING&lt;/span&gt;
ps aux | grep openerp &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not running&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Demystification:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ps aux&lt;/strong&gt; &lt;em&gt;list process and send output to screen&lt;/em&gt;
&lt;strong&gt;grep openerp&lt;/strong&gt; &lt;em&gt;filter process with openerp in them.&lt;/em&gt;
&lt;strong&gt;|| echo "not running"&lt;/strong&gt; &lt;em&gt;if the result(exit code) of grep is false, print 'not found'&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Easy,but wait my own command is always fetch by grep! the result is &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;my_user&lt;/span&gt;       &lt;span class="mi"&gt;4220&lt;/span&gt; &lt;span class="mf"&gt;16.4&lt;/span&gt;  &lt;span class="mf"&gt;4.9&lt;/span&gt; &lt;span class="mi"&gt;1080324&lt;/span&gt; &lt;span class="mi"&gt;400516&lt;/span&gt; &lt;span class="n"&gt;pts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;Sl&lt;/span&gt;   &lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;  &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;openerp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="n"&gt;my_user&lt;/span&gt;      &lt;span class="mi"&gt;32186&lt;/span&gt;  &lt;span class="mf"&gt;0.0&lt;/span&gt;  &lt;span class="mf"&gt;0.0&lt;/span&gt;   &lt;span class="mi"&gt;7836&lt;/span&gt;   &lt;span class="mi"&gt;884&lt;/span&gt; &lt;span class="n"&gt;pts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;openerp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the exit code of grep is always greater than 0 or logically speeking, it is &lt;em&gt;True&lt;/em&gt;. I cannot understad wether odoo is running. I had to filter out 'grep' line, or keep odoo lines only: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ps aux | grep openerp |grep python &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not running&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Demysitification:
&lt;em&gt;firstly, filter lines with openerp in them then filter the results again by:&lt;/em&gt;
&lt;strong&gt;grep python&lt;/strong&gt; &lt;em&gt;yes, nasty 'grep' line has no python in it! ;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;now it works fine. 
For the next step I wrote a bash script starting like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;ps aux | grep openerp | grep python&lt;span class="o"&gt;]&lt;/span&gt; 
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But then it downed on me that the solution is much easier, the final script is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;run-odoo.sh:

&lt;span class="nb"&gt;cd&lt;/span&gt; ~/odoo &lt;span class="c"&gt;#replace it with your odoo folder&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; : &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
./openerp-server
sleep 3
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;just run it the same as before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nohup ./run-odoo.sh &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;clean and easy! &lt;/p&gt;</summary><category term="odoo"></category><category term="openerp"></category><category term="general"></category></entry><entry><title>Seting Up this blog with Pelican</title><link href="http://pouyamn.github.io/posts/2015/12/24/setup-blog/" rel="alternate"></link><updated>2015-12-24T11:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:pouyamn.github.io,2015-12-24:posts/2015/12/24/setup-blog/</id><summary type="html">&lt;p&gt;Hi every body, at first it looked like this is a very easy process to setup this blog, but it wasn't that easy. 
Gitpages suggested Jekil for blog handling , but I wanted something pythonic, so I decided to use pelican. I made a first blog using the guide in github &lt;a href="https://fedoramagazine.org/make-github-pages-blog-with-pelican/"&gt;here&lt;/a&gt;. It was nice but i had a few problems, I'm using SVN normally, so I'm not very familiar with git, this was my source of problems, I guess.
The problem was about repositories, the method mentioned in that page was cool, in compare to the other and more official methods, but you have to use a submodule which was new to me. &lt;/p&gt;
&lt;p&gt;Ok let's cut the crap, I did this:&lt;/p&gt;
&lt;p&gt;First I made a repository by the &lt;a href="https://pages.github.com/"&gt;official documentions&lt;/a&gt; (I didn't install jekil). Then I created two new repositories, myusername.github.io-src and myusername.github.io, as explained on &lt;a href="https://github.com/new"&gt;Github pages&lt;/a&gt;.&lt;/p&gt;
&lt;p&gt;Then I cloned the source (...-src) to a folder named &lt;em&gt;ghpages&lt;/em&gt; by:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git clone https://github.com/myusername/myusername.github.io-src.git ghpages
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;and made git remember my creditentials:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git config credential.helper store
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I made a submodel repository by entering this in my main folder (ghpages):&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;git submodule add https://github.com/pouyamn/pouyamn.github.io.git output
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;so it made a folder named &lt;em&gt;output&lt;/em&gt;. Now it was the time for installing pelican and running it:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install python-pelican
&lt;span class="nb"&gt;cd&lt;/span&gt; /ghpages
pelican-quickstart 
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;we have to stop pelican from erasing the output directory everytime, I edited &lt;em&gt;publishconf.py&lt;/em&gt;: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;DELETE_OUTPUT_DIRECTORY&lt;/span&gt; &lt;span class="o"&gt;=&lt;/span&gt; &lt;span class="bp"&gt;False&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;well it is almost there, make the first post in contents folder. I used MarkDown, although other languages are also possible. For this I installed haroopad&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;sudo apt-get install haroopad
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;I made a file in &lt;em&gt;content&lt;/em&gt; folder named for example, &lt;em&gt;first.md&lt;/em&gt;. and I made this post in it.
Ok, let's take a look:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make html &lt;span class="o"&gt;&amp;amp;&amp;amp;&lt;/span&gt; make serve
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;you can now open &lt;em&gt;localhost:8000&lt;/em&gt; and enjoy your first post in your pc (links willnot work, they are directed to the &lt;em&gt;real&lt;/em&gt; blog). &lt;/p&gt;
&lt;p&gt;Publish time!&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;make publish
&lt;span class="nb"&gt;cd &lt;/span&gt;output/
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;First Post.&amp;quot;&lt;/span&gt;
git push -u origin master
&lt;span class="nb"&gt;cd&lt;/span&gt; ..
&lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s1"&gt;&amp;#39;*.pyc&amp;#39;&lt;/span&gt; &amp;gt;&amp;gt; .gitignore &lt;span class="c"&gt;#don&amp;#39;t need pyc file&lt;/span&gt;
git add .
git commit -m &lt;span class="s2"&gt;&amp;quot;First commit.&amp;quot;&lt;/span&gt;
git push -u origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Demystification:
make the html files, setup the links and prepare it, send the compiled result to github and finally send the source files to github too keep them safe :).
that's it.&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;edit&lt;/strong&gt;
Some caretaker's tasks:&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;Make publishing more automatic and comfortable:&lt;/li&gt;
&lt;/ul&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#file: makefile&lt;/span&gt;
...
github: publish
        &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;OUTPUTDIR&lt;span class="k"&gt;)&lt;/span&gt;
        git add -A .
        git commit -m &lt;span class="s2"&gt;&amp;quot;Auto Post!&amp;quot;&lt;/span&gt;  
        git push origin master
        &lt;span class="nb"&gt;cd&lt;/span&gt; &lt;span class="k"&gt;$(&lt;/span&gt;BASEDIR&lt;span class="k"&gt;)&lt;/span&gt;
        git add -A .
        git commit -m &lt;span class="s2"&gt;&amp;quot;Auto Commit!&amp;quot;&lt;/span&gt;    
        git push origin master
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So I can use &lt;code&gt;make github&lt;/code&gt; for publishing and posting to my account.&lt;/p&gt;
&lt;ul&gt;
&lt;li&gt;
&lt;p&gt;take care of &lt;code&gt;pelicanconf.py&lt;/code&gt; and &lt;code&gt;publishconf.py&lt;/code&gt;, the former is for local serving and testing and the latter is for publishing, as the name suggests!&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;put disqus, google analytics etc in publish profile only, put the others in &lt;strong&gt;both&lt;/strong&gt; .&lt;/p&gt;
&lt;/li&gt;
&lt;li&gt;
&lt;p&gt;use relative paths in &lt;code&gt;pelicanconf.py&lt;/code&gt;, don't use them in &lt;code&gt;publishconf.py&lt;/code&gt;.&lt;/p&gt;
&lt;/li&gt;
&lt;/ul&gt;</summary><category term="pelican"></category><category term="publishing"></category></entry></feed>