<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom"><title>Odoo Demystification</title><link href="http://pouyamn.github.io/" rel="alternate"></link><link href="http://pouyamn.github.io/feeds/odoo.atom.xml" rel="self"></link><id>http://pouyamn.github.io/</id><updated>2016-01-16T11:26:00+01:00</updated><entry><title>QWEB demystification, Part 1 - t-field and t-esc</title><link href="http://pouyamn.github.io/posts/2016/01/16/qweb-1/" rel="alternate"></link><updated>2016-01-16T11:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:pouyamn.github.io,2016-01-16:posts/2016/01/16/qweb-1/</id><summary type="html">&lt;p&gt;When I stated to make some QWEB reports, I was wondering why there are both &lt;code&gt;t-field&lt;/code&gt; and &lt;code&gt;t-esc&lt;/code&gt;? For example both &lt;code&gt;t-esc="partner_id.name"&lt;/code&gt; and &lt;code&gt;t-field="partner_id.name"&lt;/code&gt; has the exact same output. &lt;/p&gt;
&lt;p&gt;I made a thorough study and I'll tell you the results, but first... Let me write about QWEB, the great html templating engine. 
There are some templating language, and some of them are XML-based like Genshi, Thymeleaf or Facelets. But QWEB is exactly designed for Odoo, it has access to the database and python side and context. Other templating engines are more general than QWEB and the can normally access to some kind of context passed in a JSON object only. 
The beauty of QWEB is that it is python integrated, there are not just variables but also you can have some python expressions and also it has customizable widgets. I'll write about widgets and using expressions to change the html dynamically.
Appologies me for talking too much, lets get back to the story, &lt;code&gt;t-esc&lt;/code&gt; or &lt;code&gt;t-field&lt;/code&gt;. The differences are quite a few, in text fields they are just the same but it is not going on like this with the others. The difference is in the interpreter of them and the widgets.&lt;code&gt;t-esc&lt;/code&gt; actually calls a &lt;code&gt;safe-eval&lt;/code&gt; most of other 't's do the same but &lt;code&gt;t-field&lt;/code&gt; can acept only a field name, or a chain of dot seperated related fields. Also, &lt;code&gt;t-field&lt;/code&gt; uses form widgets for rendering the selected field while &lt;code&gt;t-esc&lt;/code&gt; only returns a simple python output (we can change this and prettify the otherwise blunt &lt;code&gt;t-esc&lt;/code&gt;, I'll talk about it in the following parts). For example if you call t-esc on a related field i.e. &lt;code&gt;t-esc="someMany2Onefield"&lt;/code&gt; it will print the python &lt;code&gt;__str__&lt;/code&gt; of the class and a record number, just like what you will have if you in python:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;print&lt;/span&gt; &lt;span class="bp"&gt;self&lt;/span&gt;&lt;span class="o"&gt;.&lt;/span&gt;&lt;span class="n"&gt;someMany2Onefield&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt;someMany2Onefield(12,)&lt;/code&gt;
but if you use &lt;code&gt;t-field&lt;/code&gt; it will display the &lt;code&gt;display_name&lt;/code&gt; field or the &lt;code&gt;name_get&lt;/code&gt;. The difference is &lt;code&gt;t-field&lt;/code&gt; uses form widget of the field as i said before. The same goes with the numerical fields, &lt;code&gt;t-field&lt;/code&gt; will use the &lt;code&gt;digits&lt;/code&gt; property of the field for decimal point and it will use thousend separator and other settings from the language settings of Odoo, while &lt;code&gt;t-esc&lt;/code&gt; simply print the number without formatting (although one can use python's &lt;code&gt;format&lt;/code&gt; function in &lt;code&gt;t-esc&lt;/code&gt;).
Other 't' tags also use safe_eval, &lt;code&gt;t-set&lt;/code&gt; in &lt;code&gt;t-value&lt;/code&gt; part, &lt;code&gt;t-if&lt;/code&gt;,  &lt;code&gt;t-foreach&lt;/code&gt;, &lt;code&gt;t-att&lt;/code&gt; and &lt;code&gt;t-attf&lt;/code&gt;, &lt;code&gt;t-raw&lt;/code&gt; and &lt;code&gt;t-log&lt;/code&gt;.&lt;/p&gt;
&lt;h4&gt;What can be used in safe_eval&lt;/h4&gt;
&lt;p&gt;&lt;code&gt;qweb_context&lt;/code&gt; and of course safe python commands! It raises two questions, what are &lt;em&gt;safe&lt;/em&gt; python commands and what is in &lt;code&gt;qweb_context&lt;/code&gt;?&lt;/p&gt;</summary><category term="QWEB"></category><category term="safe-eval"></category><category term="openerp"></category><category term="odoo"></category><category term="odoo reports"></category></entry><entry><title>QWEB demystification, Part 2 - qweb widgits</title><link href="http://pouyamn.github.io/posts/2016/01/16/qweb-2/" rel="alternate"></link><updated>2016-01-16T11:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:pouyamn.github.io,2016-01-16:posts/2016/01/16/qweb-2/</id><summary type="html"></summary><category term="QWEB"></category><category term="safe-eval"></category><category term="openerp"></category><category term="odoo"></category><category term="odoo reports"></category><category term="qweb widgits"></category></entry><entry><title>QWEB demystification, Part 3 - dynamic views in QWEB</title><link href="http://pouyamn.github.io/posts/2016/01/16/qweb-3/" rel="alternate"></link><updated>2016-01-16T11:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:pouyamn.github.io,2016-01-16:posts/2016/01/16/qweb-3/</id><summary type="html"></summary><category term="QWEB"></category><category term="safe-eval"></category><category term="openerp"></category><category term="odoo"></category><category term="odoo reports"></category></entry><entry><title>Keep Odoo running, easily</title><link href="http://pouyamn.github.io/posts/2016/01/12/keep-odoo-running/" rel="alternate"></link><updated>2016-01-12T11:26:00+01:00</updated><author><name>Pouya MN</name></author><id>tag:pouyamn.github.io,2016-01-12:posts/2016/01/12/keep-odoo-running/</id><summary type="html">&lt;p&gt;A few months ago we had this problem with odoo, the server was sometimes jumping out; quiting with no error, sometimes some momory error. All we had to do was running it agian. It was happening about every 12-48 hours normally but some times every 2-3 hours. It was a pain in the butt, so I made an easy solution that is still working. It means no user complains anymore ;).&lt;/p&gt;
&lt;p&gt;A bit of history, I was using ssh to connect to the server and run it with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nohup ./openerp-server &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;please note that I ran ./openerep-server directly, whenever I close ssh connection the server would quit. &lt;/p&gt;
&lt;p&gt;The solution was a shell script. At first, I tried to check if odoo is running and if not run it. I started with this command:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="c"&gt;#NOT WORKING&lt;/span&gt;
ps aux | grep openerp &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not running&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Demystification:&lt;/p&gt;
&lt;p&gt;&lt;strong&gt;ps aux&lt;/strong&gt; &lt;em&gt;list process and send output to screen&lt;/em&gt;
&lt;strong&gt;grep openerp&lt;/strong&gt; &lt;em&gt;filter process with openerp in them.&lt;/em&gt;
&lt;strong&gt;|| echo "not running"&lt;/strong&gt; &lt;em&gt;if the result(exit code) of grep is false, print 'not found'&lt;/em&gt; &lt;/p&gt;
&lt;p&gt;Easy,but wait my own command is always fetch by grep! the result is &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="n"&gt;my_user&lt;/span&gt;       &lt;span class="mi"&gt;4220&lt;/span&gt; &lt;span class="mf"&gt;16.4&lt;/span&gt;  &lt;span class="mf"&gt;4.9&lt;/span&gt; &lt;span class="mi"&gt;1080324&lt;/span&gt; &lt;span class="mi"&gt;400516&lt;/span&gt; &lt;span class="n"&gt;pts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;0&lt;/span&gt;  &lt;span class="n"&gt;Sl&lt;/span&gt;   &lt;span class="mo"&gt;07&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;54&lt;/span&gt;  &lt;span class="mi"&gt;21&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mi"&gt;15&lt;/span&gt; &lt;span class="n"&gt;python&lt;/span&gt; &lt;span class="p"&gt;.&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="n"&gt;openerp&lt;/span&gt;&lt;span class="o"&gt;-&lt;/span&gt;&lt;span class="n"&gt;server&lt;/span&gt;
&lt;span class="n"&gt;my_user&lt;/span&gt;      &lt;span class="mi"&gt;32186&lt;/span&gt;  &lt;span class="mf"&gt;0.0&lt;/span&gt;  &lt;span class="mf"&gt;0.0&lt;/span&gt;   &lt;span class="mi"&gt;7836&lt;/span&gt;   &lt;span class="mi"&gt;884&lt;/span&gt; &lt;span class="n"&gt;pts&lt;/span&gt;&lt;span class="o"&gt;/&lt;/span&gt;&lt;span class="mi"&gt;1&lt;/span&gt;    &lt;span class="n"&gt;S&lt;/span&gt;&lt;span class="o"&gt;+&lt;/span&gt;   &lt;span class="mi"&gt;10&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;04&lt;/span&gt;   &lt;span class="mi"&gt;0&lt;/span&gt;&lt;span class="o"&gt;:&lt;/span&gt;&lt;span class="mo"&gt;00&lt;/span&gt; &lt;span class="n"&gt;grep&lt;/span&gt; &lt;span class="n"&gt;openerp&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;So the exit code of grep is always greater than 0 or logically speeking, it is &lt;em&gt;True&lt;/em&gt;. I cannot understad wether odoo is running. I had to filter out 'grep' line, or keep odoo lines only: &lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;ps aux | grep openerp |grep python &lt;span class="o"&gt;||&lt;/span&gt; &lt;span class="nb"&gt;echo&lt;/span&gt; &lt;span class="s2"&gt;&amp;quot;not running&amp;quot;&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;Demysitification:
&lt;em&gt;firstly, filter lines with openerp in them then filter the results again by:&lt;/em&gt;
&lt;strong&gt;grep python&lt;/strong&gt; &lt;em&gt;yes, nasty 'grep' line has no python in it! ;)&lt;/em&gt;&lt;/p&gt;
&lt;p&gt;now it works fine. 
For the next step I wrote a bash script starting like:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;&lt;span class="k"&gt;if&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt;ps aux | grep openerp | grep python&lt;span class="o"&gt;]&lt;/span&gt; 
...
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;But then it downed on me that the solution is much easier, the final script is:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;run-odoo.sh:

&lt;span class="nb"&gt;cd&lt;/span&gt; ~/odoo &lt;span class="c"&gt;#replace it with your odoo folder&lt;/span&gt;
&lt;span class="k"&gt;while&lt;/span&gt; &lt;span class="o"&gt;[&lt;/span&gt; : &lt;span class="o"&gt;]&lt;/span&gt;
&lt;span class="k"&gt;do&lt;/span&gt;
./openerp-server
sleep 3
&lt;span class="k"&gt;done&lt;/span&gt;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;just run it the same as before:&lt;/p&gt;
&lt;div class="highlight"&gt;&lt;pre&gt;nohup ./run-odoo.sh &amp;amp;
&lt;/pre&gt;&lt;/div&gt;


&lt;p&gt;clean and easy! &lt;/p&gt;</summary><category term="odoo"></category><category term="openerp"></category><category term="general"></category></entry></feed>